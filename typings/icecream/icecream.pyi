"""
This type stub file was generated by pyright.
"""

import executing
from contextlib import contextmanager
from pygments.formatters import Terminal256Formatter
from pygments.lexers import Python3Lexer as Py3Lexer
from .coloring import SolarizedDark

_absent = ...
def bindStaticVariable(name, value): # -> Callable[..., Any]:
    ...

@bindStaticVariable('formatter', Terminal256Formatter(style=SolarizedDark))
@bindStaticVariable('lexer', Py3Lexer(ensurenl=False))
def colorize(s): # -> Any:
    ...

@contextmanager
def supportTerminalColorsInWindows(): # -> Generator[None, Any, None]:
    ...

def stderrPrint(*args): # -> None:
    ...

def isLiteral(s): # -> bool:
    ...

def colorizedStderrPrint(s): # -> None:
    ...

DEFAULT_PREFIX = ...
DEFAULT_LINE_WRAP_WIDTH = ...
DEFAULT_CONTEXT_DELIMITER = ...
DEFAULT_OUTPUT_FUNCTION = ...
DEFAULT_ARG_TO_STRING_FUNCTION = ...
NO_SOURCE_AVAILABLE_WARNING_MESSAGE = ...
def callOrValue(obj): # -> object:
    ...

class Source(executing.Source):
    def get_text_with_indentation(self, node): # -> str:
        ...
    


def prefixLines(prefix, s, startAtLine=...):
    ...

def prefixFirstLineIndentRemaining(prefix, s):
    ...

def formatPair(prefix, arg, value): # -> str:
    ...

def singledispatch(func): # -> _SingleDispatchCallable[Any]:
    ...

@singledispatch
def argumentToString(obj): # -> str:
    ...

class IceCreamDebugger:
    _pairDelimiter = ...
    lineWrapWidth = ...
    contextDelimiter = ...
    def __init__(self, prefix=..., outputFunction=..., argToStringFunction=..., includeContext=..., contextAbsPath=...) -> None:
        ...
    
    def __call__(self, *args): # -> tuple[Any, ...] | None:
        ...
    
    def format(self, *args): # -> str | LiteralString:
        ...
    
    def enable(self): # -> None:
        ...
    
    def disable(self): # -> None:
        ...
    
    def configureOutput(self, prefix=..., outputFunction=..., argToStringFunction=..., includeContext=..., contextAbsPath=...): # -> None:
        ...
    


ic = ...
